<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的IOC，吧service对象配置进来 -->
    <bean id="Service" class="cn.service.impl.ServiceImpl"></bean>

    <!-- spring中基于XML的AOP配置步骤：
            1.把通知Bean也交给spring来管理
            2.使用aop：config标签表明开始AOP的配置
            3.使用aop：aspect标签表明配置切面
                id：切面唯一标识
                ref：指定通知类bean的id
            4.在aop：aspect标签的内部使用对应标签来配置通知的类型
                现在示例让printLog方法在切入点方法执行之前执行，
                所以是前置通知aop:before
                    method：指定Logger中那个方法的通知
                    pointcut:指定切入点表达式：指出对业务层中那些方法增强

                        切入点表达式写法：
                            关键字：execution（表达式）
                            表达式：
                          标准写法：
                                访问修饰符 返回值 包名 类名 方法名(参数列表)
                                public void cn.service.impl.ServiceImpl.saveAccount()
                          访问修饰符可以省略，返回值，包名，类名，方法名可以用通配符
                          用..表示有无均可
                          全通配写法：
                                        *    *..*.*(..)
                          实际开发中切入点表达式的通常写法：
                                切到业务层实现类下的所有方法
                                * cn.service.impl.*.*(..)
    -->
    <!-- 配置Logger类 -->
    <bean id="logger" class="cn.utils.Logger"></bean>

    <!-- 配置AOP-->
    <aop:config>
        <!-- 配置切入点表达式：id：指定表达式的唯一标识，expression指定表达式内容
                    标签可以写在内部，标识当前切面可用
                       也能写在外围，标识所有切面可用-约束要求放在前面
        -->
        <aop:pointcut id="ptl" expression="execution(* cn.service.impl.*.*(..))"/>

        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知类型，建立通知方法和切入点方法的关联 -->
            <aop:before method="beforPrintLog" pointcut-ref="ptl"></aop:before>

            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="ptl"></aop:after-throwing>

            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="ptl"></aop:after-returning>

            <aop:after method="afterPrintLog" pointcut-ref="ptl"></aop:after>

            <!-- 环绕通知
            <aop:around method="aroundPrintLog" pointcut-ref="ptl"></aop:around>
            -->
        </aop:aspect>
    </aop:config>

</beans>